In js-roguelite, the largest "unit" of a gui is a menu. All
gui-related entities / objects for a particular menu are contained in it.
All menu information is stored and read from .xml files. The current basic
template looks something like:

<?xml version="1.0" encoding="UTF-8"?>
<file>
  <header>
      <type></type>
      <name></name>
      <layout></layout>
  </header>
  <menu>
      [insert gui objects here]
  </menu>
</file>

The file starts with xml metadata which tells the parser how to parse the
information. From there, everything related to the file is kept within the
<file> tag.

The <header> file contains general "file settings". All .xml files must
contain the <type> tag (in case I decide to use .xml for any other reason) and
all menu .xml files must include <name> and <layout> tags.

The <menu> tag contains all gui objects.

Currently menus support the following layouts:

- floatLayout (can place anywhere, position must be specified per entity)
  NOTE: coordinates for floatLayout are relative to the engine's
  default screen resolution (currently. 960x540). In other words,
  0 <= x <= 960 and 0 <= y <= 540 (unless you want stuff being cut off). The
  engine scales these values to other screen sizes automatically.

Here's a list of all currently supported gui entities and their attributes.
It can be assumed that attributes without descriptions inherit their
functionality from its first definition:

- label (displays text)
  attributes:
    text: the text the object displays.
    x: object's x position on the menu screen.
    y: object's y position on the menu screen.
    style: string value that indicates how the text should be styled. see
           Renderer.prototype.createTextStyles in graphics.js for a list
           of available styles.

- button (can display text with callback functionality)
  attributes:
    text:
    x:
    y:
    width: the width of the widget's frame. (NOTE: if set, text may overflow bounds)
    height: the height of the widget's frame. (NOTE: if set, text may overflow bounds)
    horizontalPadding: Determines how much padding is between the widget frame and its contents.
                       Check the widget's respective createGraphic function for the default value.
                       padding is distributed evenly (i.e. a value of 20 means, 10 pixels of more space
                       on each side)
    textStyle: similar to label's style attribute, sets the style of the
               button's text.
    buttonStyle: defines how buttons are styled. See Renderer.prototype.createButtonStyles.
    callback: string value that indicates which callback function should be fired on
              button click. See Game.callbacks in game.js.

- list (contains a set of its own widgets as list items)
  attributes:
    x:
    y:
    spaceBetween: number of pixels to put between listItems.
    orientation: can be either vertical or horizontal. Tells the engine
                 how the list widget position its children.
    justifyContents: determines where listItems will be positioned relative
                 to the listWidget. Currently only "center" is supported.

- frame (a rectangle that is drawn behind its parent widget; good for backgrounds)
  NOTE: Since draw order is determined by the order of the elements. if you want
        multiple frames belonging to the same widget to be layered in
        a certain order, make sure they are ordered correctly in the menu file.
        (i.e. from furthest -> closest)
  attributes:
    x:
    y:
    width:
    height:
    horizontalPadding:
    verticalPadding: Similar to horizontal padding but in the y coordinate.
    NOTE: Padding values will be ignored if the frame's parent is the Menu itself and
    no width / height values are specified (because default value takes up entire screen).
    frameStyle: defines how the frame is styled.

- img (for displaying images)
  NOTE: If the image's type is set to "gui", only the files in guiCustomStyle.json,
        with "model" = "image" will be accepted.
  attributes:
    x:
    y:
    justifyContents:
    src: (REQUIRED) contains the name of the image file / guiCustomStyle entry.
    type: string identifier for the Engine to figure out where to look for src name.
          Options are currently: "gui", "sprite", "fullImage".
          Default value is fullImage.
    spriteIndex: (For "spriteSheet" types only!) Comma separated list of integers that specifies the index
                 of the sprite to capture from its spriteSheet.
    frameArray: Comma separated list of integers that tells the engine how to crop / frame the image.
                If type is set to sprite and spriteIndex is specified, this will be ignored.
    scale: determines how much to scale the image by. The default is the engine's spriteScale value.

- arrowSelect (small menu with left and right arrows as buttons for switching between options)
  attributes:
    x:
    y:
    width:
    height:
    horizontalPadding:
    options: Comma separated list of option names.
    optionsLoop: Determines if the arrowSelect will cycle through the options or not.
